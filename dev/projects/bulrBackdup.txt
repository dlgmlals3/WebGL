<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>가우시안 블러 이미지 처리</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: #222;
            font-family: Arial, sans-serif;
        }
        
        canvas {
            display: block;
        }
        
        #info {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 14px;
            z-index: 100;
        }
        
        #controls {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.8);
            padding: 20px;
            color: white;
            border-radius: 8px;
            min-width: 200px;
        }
        
        .control-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        input[type="range"] {
            width: 100%;
            margin-bottom: 5px;
        }
        
        .value-display {
            font-size: 12px;
            color: #ccc;
        }
        
        #fileInput {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div id="info">
        <h3>가우시안 블러 이미지 처리</h3>
        <p>이미지를 업로드하고 슬라이더로 블러 영역을 조절하세요</p>
    </div>

    <div id="controls">
        <div class="control-group">
            <label>이미지 업로드:</label>
            <input type="file" id="fileInput" accept="image/*,.png,.jpg,.jpeg,.gif,.bmp,.webp">
            <div id="uploadStatus" style="font-size: 12px; color: #ccc; margin-top: 5px;">파일을 선택하세요</div>
        </div>
        
        <div class="control-group">
            <label>X Offset </label>
            <input type="range" id="xOffset" min="-1.0" max="1.0" step="0.01" value="0.0">
            <span class="value-display" id="xOffsetValue">0.0</span>
        </div>

        <div class="control-group">
            <label>Y Offset (블러 영역)</label>
            <input type="range" id="yOffset" min="0" max="1.0" step="0.01" value="1.0">
            <span class="value-display" id="yOffsetValue">1.0</span>
        </div>
        
        <div class="control-group">
            <label>blurStrength </label>
            <input type="range" id="blurStrength" min="1" max="3" step="0.01" value="1">
            <span class="value-display" id="blurStrengthValue">1</span>
        </div>
        
        <div class="control-group">
            <label> Radius </label>
            <input type="range" id="blurRadius" min="1" max="30" step="1" value="17">
            <span class="value-display" id="blurRadiusValue">17</span>
        </div>

        <div class="control-group">
            <label>베지어 P1 (시작점 기울기)</label>
            <input type="range" id="bezierP1" min="0.0" max="1.0" step="0.01" value="0.5">
            <span class="value-display" id="bezierP1Value">0.5</span>
        </div>
        
        <div class="control-group">
            <label>베지어 P2 (끝점 기울기)</label>
            <input type="range" id="bezierP2" min="0.0" max="1.0" step="0.01" value="0.5">
            <span class="value-display" id="bezierP2Value">0.5</span>
        </div>
    </div>

    <!-- Three.js 라이브러리 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    
    <script>
        let scene, camera, renderer, plane;
        let imageTexture = null;
        let defaultImageData = null;

        function init() {
            console.log("가우시안 블러 앱 초기화 중...");

            // 기본 Three.js 설정
            scene = new THREE.Scene();
            camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
            document.body.appendChild(renderer.domElement);

            // 기본 이미지 생성 (고정 파일명으로 로드 시도)
            createDefaultTexture();
            
            // 전체 화면 평면 생성
            createImagePlane();

            // 컨트롤 설정
            setupControls();

            // 파일 입력 설정
            setupFileInput();

            // 윈도우 리사이즈
            window.addEventListener('resize', onWindowResize);

            console.log("초기화 완료!");
        }

        function createDefaultTexture() {
            // 상대 경로로 이미지 파일 로드 (HTML 파일과 같은 폴더)
            loadImageFromFile('./0.jpg');
        }

        function loadImageFromFile(filename) {
            console.log('이미지 로딩 시도:', filename);
            
            const img = new Image();
            img.crossOrigin = 'anonymous';
            
            img.onload = () => {
                console.log('이미지 로드 성공:', img.width, 'x', img.height);
                
                try {
                    // 새 텍스처 생성
                    const texture = new THREE.Texture(img);
                    texture.needsUpdate = true;
                    texture.minFilter = THREE.LinearFilter;
                    texture.magFilter = THREE.LinearFilter;
                    texture.wrapS = THREE.ClampToEdgeWrapping;
                    texture.wrapT = THREE.ClampToEdgeWrapping;
                    texture.flipY = false;
                    texture.format = THREE.RGBAFormat;
                    
                    // 기존 텍스처 정리
                    if (imageTexture && imageTexture.dispose) {
                        imageTexture.dispose();
                    }
                    
                    // 텍스처 교체
                    imageTexture = texture;
                    if (plane && plane.material) {
                        plane.material.uniforms.uTexture.value = texture;
                        plane.material.needsUpdate = true;
                    }
                    
                    console.log('텍스처 업데이트 완료');
                    
                } catch (error) {
                    console.error('텍스처 생성 오류:', error);
                    createFallbackTexture();
                }
            };
            
            img.onerror = (error) => {
                console.error('이미지 로드 실패:', error);
                console.log('기본 체크보드 패턴으로 대체');
                createFallbackTexture();
            };
            
            // 이미지 소스 설정
            img.src = filename;
        }

        function createFallbackTexture() {
            // 512x512 체크보드 패턴 생성 (fallback)
            const size = 512;
            const canvas = document.createElement('canvas');
            canvas.width = size;
            canvas.height = size;
            const ctx = canvas.getContext('2d');
            
            const checkSize = 32;
            for (let x = 0; x < size; x += checkSize) {
                for (let y = 0; y < size; y += checkSize) {
                    const isEven = (Math.floor(x / checkSize) + Math.floor(y / checkSize)) % 2 === 0;
                    ctx.fillStyle = isEven ? '#4a90e2' : '#7bb3f0';
                    ctx.fillRect(x, y, checkSize, checkSize);
                }
            }

            // 중앙에 텍스트 추가
            ctx.fillStyle = 'white';
            ctx.font = 'bold 24px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('./img0_1920x1200.jpg', size/2, size/2 - 10);
            ctx.font = '16px Arial';
            ctx.fillText('파일을 찾을 수 없습니다', size/2, size/2 + 20);

            imageTexture = new THREE.CanvasTexture(canvas);
            imageTexture.needsUpdate = true;
        }

        function createImagePlane() {
            const geometry = new THREE.PlaneGeometry(2, 2);

            const material = new THREE.ShaderMaterial({
                uniforms: {
                    uTexture: { value: imageTexture },
                    uResolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
                    uXOffset: { value: 0.0 },
                    uYOffset: { value: 0.5 },
                    uBlurStrength: { value: 1 },
                    uBlurRadius: { value: 17 },
                    uBezierP1 : {value : 0},
                    uBezierP2 : {value : 1.0}
                },

                vertexShader: `
                    precision mediump float;
                    varying vec2 vUv;
                    
                    void main() {
                        vUv = uv;
                        gl_Position = vec4(position, 1.0);
                    }
                `,

                fragmentShader: `
                    uniform sampler2D uTexture;
                    uniform vec2 uResolution;
                    uniform float uYOffset;
                    uniform float uXOffset;
                    uniform float uBlurStrength;
                    uniform float uBlurRadius;
                    uniform float uBezierP1;
                    uniform float uBezierP2;
                    varying vec2 vUv;
                    
                    float gaussian(float x, float sigma) {
                        return 1.0 / (sqrt(2.0 * 3.141592) * sigma) * exp(-(x * x) / (2.0 * sigma * sigma));
                    }
                    

                    // 베지어 곡선 (cubic-bezier) 계산
                    float cubicBezier(float t, float p1, float p2) {
                        float invT = 1.0 - t;
                        return 3.0 * invT * invT * t * p1 + 3.0 * invT * t * t * p2 + t * t * t;
                    }
                    
                    // 그라데이션 값 계산 (0.0 = 원본, 1.0 = 블러)
                    float getGradientValue(vec2 uv, float yOffset) {
                        float t = smoothstep(yOffset, 0.0, uv.y);
                        return clamp(0.0, 1.0, t);
                    }

                    // 가우시안 블러 함수
                    vec4 gaussianBlur(sampler2D tex, vec2 uv, vec2 direction, float radius, float strength) {
                        vec4 color = vec4(0.0);
                        float total = 0.0;
                        
                        // 가우시안 가중치 계산을 위한 sigma
                        float sigma = radius / 3.0;
                        int kernelSize = int(radius * 2.0 + 1.0);

                        for (int i = -kernelSize; i <= kernelSize; i++) {                            
                            vec2 offset = direction * float(i) * strength;                            
                            // 가우시안 가중치 계산
                            float weight = gaussian(float(i)), sigma);                                
                            color += texture2D(tex, uv + offset) * weight;
                            total += weight;
                        }
                        
                        return color / total;
                    }

                    /*
                    vec4 gaussianBlurAdaptive(sampler2D tex, vec2 uv, vec2 texelSize, float maxRadius, float radiusMultiplier) {
                        // radiusMultiplier가 0이면 radius = 0 (원본), 1이면 maxRadius
                        
                        float currentRadius = maxRadius * radiusMultiplier;
                        
                        if (currentRadius < 0.5) {                            
                            return texture2D(tex, uv);
                        }
                        
                        vec4 color = vec4(0.0);
                        float total = 0.0;
                        
                        float sigma = currentRadius / 3.0;
                        int kernelSize = int(currentRadius * 2.0 + 1.0);

                        for (int x = -kernelSize; x <= kernelSize; x++) {
                            for (int y = -kernelSize; y <= kernelSize; y++) {
                                vec2 offset = vec2(x, y) * texelSize;
                                float weight = gaussian(vec2(x, y), sigma);                                
                                color += texture2D(tex, uv + offset) * weight;
                                total += weight;
                            }
                        }
                        return color / total;
                        
                    }
                    */

                    void main() {
                        vec2 uv = vUv;
                        
                        // 텍스처에서 직접 크기를 가져올 수 없는 경우를 대비해 고정값 사용
                        vec2 texelSize = vec2(1.0 / uResolution); // 기본값, 실제로는 동적으로 계산되어야 함
                        
                        // Y 오프셋에 따라 블러 영역 결정
                        // uXOffset이 0이면 정확히 반반, -1이면 전체 블러, 1이면 블러 없음
                        float blurBoundary = 0.5 + uXOffset * 0.5;
                        vec4 originalColor = texture2D(uTexture, uv);
                        
                        if (uv.x < blurBoundary) {
                            //float blurIntensity = getGradientValue(uv, uYOffset);                            
                            //float bezierValue = cubicBezier(blurIntensity, uBezierP1, uBezierP2);                            
                            //gl_FragColor = gaussianBlurAdaptive(uTexture, uv, texelSize, uBlurRadius, bezierValue);
                        } else {
                            
                            // 왼쪽 영역: 가우시안 블러 적용
                            vec4 blurredColor = gaussianBlur(uTexture, uv, 
                                vec2(texelSize, 0.0) , uBlurRadius, uBlurStrength);
                            gl_FragColor = blurredColor;
                            
                            
                            float gradientValue = getGradientValue(uv, uYOffset);                                                    
                            float bezierValue = cubicBezier(gradientValue, uBezierP1, uBezierP2);
                            //gl_FragColor = vec4(bezierValue, 0.0, 0.0, 1.0);
                            gl_FragColor = mix(originalColor, blurredColor, bezierValue);
                        }
                        
                        // 경계선 표시 (선택적)
                        float borderWidth = 0.002;
                        if (abs(uv.x - blurBoundary) < borderWidth) {
                            gl_FragColor = mix(gl_FragColor, vec4(1.0, 1.0, 0.0, 1.0), 0.3);
                        }
                    }
                `,

                side: THREE.DoubleSide
            });

            plane = new THREE.Mesh(geometry, material);
            scene.add(plane);
        }

        function setupControls() {
            // X Offset 슬라이더
            const xOffsetSlider = document.getElementById('xOffset');
            const xOffsetValue = document.getElementById('xOffsetValue');
            xOffsetSlider.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                plane.material.uniforms.uXOffset.value = value;
                yOffsetValue.textContent = value.toFixed(2);
            });

            // Y Offset 슬라이더
            const yOffsetSlider = document.getElementById('yOffset');
            const yOffsetValue = document.getElementById('yOffsetValue');
            yOffsetSlider.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                plane.material.uniforms.uYOffset.value = value;
                yOffsetValue.textContent = value.toFixed(2);
            });

            // 블러 강도 슬라이더
            const blurStrengthSlider = document.getElementById('blurStrength');
            const blurStrengthValue = document.getElementById('blurStrengthValue');
            blurStrengthSlider.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                plane.material.uniforms.uBlurStrength.value = value;
                blurStrengthValue.textContent = value.toFixed(1);
                console.log('블러 강도 변경:', value);
            });

            // 블러 반지름 슬라이더
            const blurRadiusSlider = document.getElementById('blurRadius');
            const blurRadiusValue = document.getElementById('blurRadiusValue');
            blurRadiusSlider.addEventListener('input', (e) => {
                const value = parseInt(e.target.value);
                plane.material.uniforms.uBlurRadius.value = value;
                blurRadiusValue.textContent = value;
                console.log('블러 반지름 변경:', value);
            });
            
            const bezierP1Slider = document.getElementById('bezierP1');
            const bezierP1Value = document.getElementById('bezierP1Value');
            bezierP1Slider.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                plane.material.uniforms.uBezierP1.value = value;
                bezierP1Value.textContent = value
                console.log('베지어 P1 변경:', value);
            });
            
            const bezierP2Slider = document.getElementById('bezierP2');
            const bezierP2Value = document.getElementById('bezierP2Value');
            bezierP2Slider.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                plane.material.uniforms.uBezierP2.value = value;
                bezierP2Value.textContent = value
                console.log('베지어 P2 변경:', value);
            });
        }

        function setupFileInput() {
            const fileInput = document.getElementById('fileInput');
            const uploadStatus = document.getElementById('uploadStatus');
            
            fileInput.addEventListener('change', (event) => {
                const file = event.target.files[0];
                console.log('파일 선택됨:', file);
                
                if (!file) {
                    uploadStatus.textContent = '파일을 선택하세요';
                    uploadStatus.style.color = '#ccc';
                    return;
                }
                
                uploadStatus.textContent = '파일 처리 중...';
                uploadStatus.style.color = 'yellow';
                
                // 파일 타입 체크
                const validTypes = ['image/png', 'image/jpg', 'image/jpeg', 'image/gif', 'image/bmp', 'image/webp'];
                console.log('파일 타입:', file.type);
                
                if (!file.type.startsWith('image/') && !validTypes.includes(file.type)) {
                    uploadStatus.textContent = '지원하지 않는 파일 형식입니다';
                    uploadStatus.style.color = 'red';
                    return;
                }
                
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    console.log('파일 읽기 완료, 데이터 길이:', e.target.result.length);
                    uploadStatus.textContent = '이미지 로딩 중...';
                    
                    const img = new Image();
                    img.crossOrigin = 'anonymous';
                    
                    img.onload = () => {
                        console.log('이미지 로드 성공:', img.width, 'x', img.height);
                        uploadStatus.textContent = `이미지 로드 완료 (${img.width}x${img.height})`;
                        uploadStatus.style.color = 'lightgreen';
                        
                        try {
                            // 새 텍스처 생성
                            const texture = new THREE.Texture(img);
                            texture.needsUpdate = true;
                            texture.minFilter = THREE.LinearFilter;
                            texture.magFilter = THREE.LinearFilter;
                            texture.wrapS = THREE.ClampToEdgeWrapping;
                            texture.wrapT = THREE.ClampToEdgeWrapping;
                            texture.flipY = false;
                            texture.format = THREE.RGBAFormat;
                            
                            // 기존 텍스처 정리
                            if (imageTexture && imageTexture.dispose) {
                                imageTexture.dispose();
                            }
                            
                            // 텍스처 교체
                            imageTexture = texture;
                            plane.material.uniforms.uTexture.value = texture;
                            plane.material.needsUpdate = true;
                            
                            console.log('업로드된 텍스처 업데이트 완료');
                            
                        } catch (error) {
                            console.error('텍스처 생성 오류:', error);
                            uploadStatus.textContent = '텍스처 생성 실패';
                            uploadStatus.style.color = 'red';
                        }
                    };
                    
                    img.onerror = (error) => {
                        console.error('이미지 로드 실패:', error);
                        uploadStatus.textContent = '이미지 로드 실패';
                        uploadStatus.style.color = 'red';
                    };
                    
                    // 이미지 소스 설정
                    img.src = e.target.result;
                };
                
                reader.onerror = (error) => {
                    console.error('파일 읽기 실패:', error);
                    uploadStatus.textContent = '파일 읽기 실패';
                    uploadStatus.style.color = 'red';
                };
                
                // 파일을 Data URL로 읽기
                reader.readAsDataURL(file);
            });
        }

        function onWindowResize() {
            renderer.setSize(window.innerWidth, window.innerHeight);
            plane.material.uniforms.uResolution.value.set(window.innerWidth, window.innerHeight);
        }

        function animate() {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        }

        // 🚀 시작!
        init();
        animate();

        console.log("🎨 가우시안 블러 앱 시작!");
    </script>
</body>
</html>